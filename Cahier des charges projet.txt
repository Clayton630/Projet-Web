1. Objectif du Projet

L'application a pour objectif de répertorier des établissements géolocalisés et permettre aux utilisateurs de rechercher, filtrer, noter et commenter ces établissements. Chaque établissement sera affiché sur une carte interactive avec des informations détaillées.

2. Fonctionnalités

2.1. Fonctionnalités Front-End :

Carte Interactive : Affichage des établissements sur une carte via OpenStreetMap avec Leaflet.

Filtrage : Possibilité de filtrer les établissements par catégorie (ex : restaurants, hôtels, etc.).

Recherche : Barre de recherche permettant de saisir quelques lettres pour suggérer des établissements correspondants.

Notes et Commentaires : Chaque établissement peut recevoir une note et un commentaire. Une moyenne des notes sera calculée et affichée dans la fiche de l’établissement.

Fiche Établissement : Affichage des informations détaillées sur chaque établissement après un clic.

Responsive Design : L'interface utilisateur doit être compatible avec les appareils mobiles, tablettes et ordinateurs.

Base de Données Utilisateur : Les utilisateurs pourront créer un compte pour sauvegarder leurs notes et commentaires.

Technologies Front-End :

HTML/CSS/JavaScript pour l'interface.

Leaflet pour l'intégration de la carte.

Utilisation de templates CSS préexistants autorisée.

2.2. Fonctionnalités Back-End :

Gestion des Établissements : Les administrateurs peuvent ajouter, modifier ou supprimer des établissements.

Base de Données : Une base de données relationnelle pour stocker les informations des établissements, utilisateurs, notes, etc.

Sécurité : Authentification des administrateurs, gestion des sessions utilisateurs, sécurisation des données personnelles.

Technologies Back-End :

Python pour le serveur web (framework de type Django ou Flask).

Base de Données : Une base relationnelle (par exemple, PostgreSQL ou MySQL).

API : Conversion d'adresses en coordonnées géographiques via une API (ex : Nominatim pour OpenStreetMap).

3. Architecture

Modèle MVC (Modèle-Vue-Contrôleur) pour l'architecture de l'application.

Base de Données : Utilisation d'une base de données relationnelle pour stocker les données des utilisateurs, établissements, commentaires, notes, etc.

Schéma UML de la base de données à créer sur un outil comme dbdiagram.io.

Sécurité : Gestion des accès avec authentification des administrateurs et des utilisateurs.

4. Technologies

Front-End :

HTML : Structure des pages web.

CSS : Mise en forme (Templates préexistants autorisés).

JavaScript : Interactivité et recherche dynamique.

Leaflet/OpenStreetMap : Affichage de la carte avec la géolocalisation des établissements.

Back-End :

Python (Django ou Flask) pour gérer le serveur web et les API.

Base de Données : PostgreSQL ou MySQL.

API : Nominatim pour la géolocalisation.

5. Critères de Réalisation

Rédaction du Cahier des Charges : Détail complet du projet, de son objectif à son architecture, en expliquant le choix des technologies et des bases de données.

Base de Données : Conception d'un schéma UML cohérent de la base de données.

Normes de Codage : Respect des normes de codage (valide W3C).

Code Propre et Commenté : Le code doit être lisible avec des noms de variables explicites et des commentaires sur les blocs complexes.

Sécurité : Mise en place des bonnes pratiques pour sécuriser l'application, surtout pour la gestion des utilisateurs.

Versioning sur Git : Utilisation de Git pour le versionnement du projet.

Présentation : Préparation d'une présentation claire du projet et de sa mise en œuvre avec la possibilité de répondre aux questions du professeur.

6. Design de l'Interface

L'interface utilisateur doit être simple et intuitive, avec une navigation claire et facile à utiliser.

Le design doit être responsive et optimisé pour différents types d’appareils (ordinateurs, tablettes, mobiles).

7. Contraintes

Respect des standards de développement (W3C).

Le back-office n'a pas besoin d’être responsive, mais doit avoir un template différent de celui du front-end.

L'usage d'OpenStreetMap via Leaflet doit être conforme aux règles de leur API.

8. Livrables

Cahier des charges détaillé.

Schéma UML de la base de données.

Code source complet et propre.

Déploiement fonctionnel de l'application.

Documentation utilisateur et administrateur.

9. Échéancier

Phase 1 : Conception (2 semaines) – Cahier des charges, schéma UML, choix technologiques.

Phase 2 : Développement Front-End et Back-End (4 semaines) – Mise en place des fonctionnalités principales.

Phase 3 : Tests et Déploiement (2 semaines) – Tests de l'application et déploiement en ligne.

10. Technologies et Outils

Frameworks Web Python : Django ou Flask.

Base de Données : PostgreSQL ou MySQL.

Frontend : HTML/CSS/JavaScript, Leaflet pour la carte.

API : Nominatim pour la géolocalisation.